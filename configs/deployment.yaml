---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ mf.name }}
  namespace: dev

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ mf.name }}
  namespace: dev
spec:
  replicas: {{ mf.replicas.min }}
  minReadySeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ mf.replicas.max - mf.replicas.min }}
      maxUnavailable: 0
  template:
    metadata:
      labels:
        k8s-app: {{ mf.name }}
    spec:
      serviceAccountName: {{ mf.name }}
      imagePullSecrets:
      - name: babylonhealth-deploy-dev-pull-secret
      containers:
      - name: {{ mf.name }}
        image: quay.io/babylonhealth/{{ mf.name }}:SHA_OR_TAG_HERE
        imagePullPolicy: IfNotPresent
        {% if mf.env %}env:
        {% for key, value in mf.env %}
        - name: {{ key }}
          value: "{{ value }}"
        {% endfor %}
        {% endif %}
        {% if has_configmap %}
        volumeMounts:
        - name: config-volume
          mountPath: /config/
        {% endif %}
        readinessProbe:
          httpGet:
            path: /content/health
            port: {{ healthPort }}
          initialDelaySeconds: 30
          periodSeconds: 30
      {% if has_configmap %}
      volumes:
      - name: config-volume
        configMap:
          name: {{ mf.name }}-config
      {% endif %}

---
kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: {{ mf.name }}
  name: {{ mf.name }}
  namespace: dev
spec:
  {% if ports %}ports:
  {% for pm in ports %}
  - port: {{ pm.host }}
    targetPort: {{ pm.target }}
  {% endfor %}
  {% endif %}
  selector:
    k8s-app: {{ mf.name }}

{% if has_configmap %}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ mf.name }}-config
  namespace: dev
data:
  {% if mf.config %}
  {% for cfg in mf.config %}
  {{ cfg.name}}: |-
    {{ cfg.src }} TODO: get value here
  {% endfor %}
  {% endif %}
  {% if newrelic %}
  newrelic.ini: |-
    {{ newrelic }}
  {% endif %}
{% endif %}
