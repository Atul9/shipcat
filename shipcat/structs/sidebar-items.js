initSidebarItems({"enum":[["DependencyProtocol","Supported dependency protocols"]],"mod":[["authorization",""],["autoscaling","Kubernetes horizontal pod autoscaler"],["cronjob","Cron Jobs"],["gate","Gate configs"],["job","Jobs"],["kafka","Kafka configs"],["kong","Kong configs"],["kongfig","Kongfig configs"],["port",""],["rbac","Rbac"],["resources","Kubernetes resource structs"],["rollingupdate","Kubernetes rolling-update settings"],["security","Security related structs"],["sidecar","Sidecar"],["tolerations","Kuberneter tolerations"],["volume","Kubernetes volumes"]],"struct":[["ConfigMap","ConfigMap"],["ConfigMappedFile","ConfigMapped File"],["Contact","Contact data"],["Dependency","Dependency of a service"],["EnvVars","Environment variables to inject"],["HealthCheck","HealthCheck"],["HostAlias",""],["InitContainer",""],["LifeCycle","A straight port of Kubernetes Container Lifecycle Events"],["LifeCycleHandler",""],["Manifest","Main manifest, serializable from shipcat.yml or the shipcat CRD."],["Metadata","Metadata for a service"],["PersistentVolume",""],["Probe","Liveness or readiness Probe"],["Region","A region is an abstract kube context"],["SlackChannel","Slack channel verifier"],["Team",""],["VaultOpts",""],["Worker","Worker for a service"]],"type":[["Result","Convenient wrapper around `std::Result`."]]});