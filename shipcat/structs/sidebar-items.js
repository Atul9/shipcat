initSidebarItems({"enum":[["DependencyProtocol","Supported dependency protocols"]],"mod":[["autoscaling","Kubernetes horizontal pod autoscaler"],["cronjob","Cron Jobs"],["kafka","Kafka configs"],["kong","Kong configs"],["kongfig","Kongfig configs"],["port",""],["rbac","Rbac"],["security","Security related structs"],["sidecar","Sidecar"],["tolerations","Kuberneter tolerations"],["traits","Traits that the structs can implement"],["volume","Kubernetes volumes"]],"struct":[["Config","Main manifest, serializable from shipcat.yml"],["ConfigMap","ConfigMap"],["ConfigMappedFile","ConfigMapped File"],["Contact","Contact data"],["Dependency","Dependency of a service"],["EnvVars",""],["HealthCheck","HealthCheck"],["HostAlias",""],["InitContainer",""],["LifeCycle","A straight port of Kubernetes Container Lifecycle Events"],["LifeCycleHandler",""],["Manifest","Main manifest, serializable from shipcat.yml"],["Metadata","Metadata for a service"],["Probe","Liveness or readiness Probe"],["Resources","Kubernetes resources"],["RollingUpdate","Configuration parameters for Deployment.spec.strategy.rollingUpdate"],["VaultOpts",""],["Worker","Worker for a service"]],"type":[["Result","Convenient wrapper around `std::Result`."]]});